const { MongoClient } = require('mongodb');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');

let cachedDb = null;

async function connectToDatabase() {
  if (cachedDb) {
    return cachedDb;
  }

  const client = new MongoClient(process.env.MONGODB_URI);
  await client.connect();
  cachedDb = client.db('dygs_jobs');
  return cachedDb;
}

// Configure multer for memory storage
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|pdf|doc|docx/;
    const extname = allowedTypes.test(file.originalname.toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only image, PDF and document files are allowed!'));
    }
  }
});

// LINE OA Integration
async function sendToLineOA(applicationData) {
  try {
    const line = require('@line/bot-sdk');
    
    const config = {
      channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
      channelSecret: process.env.LINE_CHANNEL_SECRET
    };

    const client = new line.Client(config);

    const message = {
      type: 'text',
      text: `üìã ‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å DYGS

üÜî Application ID: ${applicationData.application_id}
üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${applicationData.first_name} ${applicationData.last_name}
üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${applicationData.email}
üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${applicationData.phone}
üíº ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${applicationData.position}
üìà ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${applicationData.experience_years} ‡∏õ‡∏µ
üéì ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${applicationData.education}
üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞: ${applicationData.skills}
üìù ‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô: ${applicationData.cover_letter ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
üìé Resume: ${applicationData.resume_data}

‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${new Date().toLocaleString('th-TH')}`
    };

    if (process.env.LINE_GROUP_ID) {
      await client.pushMessage(process.env.LINE_GROUP_ID, message);
    }
    
    console.log('Application sent to LINE OA successfully');
  } catch (error) {
    console.error('LINE OA error:', error);
  }
}

// Initialize collections
async function initializeCollections(db) {
  try {
    const applications = db.collection('applications');
    const positions = db.collection('positions');

    // Create indexes
    await applications.createIndex({ application_id: 1 }, { unique: true });
    await positions.createIndex({ title: 1 });

    // Check if positions collection is empty and insert sample data
    const positionsCount = await positions.countDocuments();
    if (positionsCount === 0) {
      await positions.insertMany([
        {
          title: 'Logistics Coordinator',
          department: 'Operations',
          description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
          requirements: '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå 2-3 ‡∏õ‡∏µ, ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏î‡∏µ',
          is_active: true
        },
        {
          title: 'Warehouse Manager',
          department: 'Warehouse',
          description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô',
          requirements: '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå 5+ ‡∏õ‡∏µ, ‡∏†‡∏≤‡∏ß‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥',
          is_active: true
        },
        {
          title: 'Delivery Driver',
          department: 'Transportation',
          description: '‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
          requirements: '‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà, ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á',
          is_active: true
        },
        {
          title: 'Customer Service',
          department: 'Sales',
          description: '‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô',
          requirements: '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå 1-2 ‡∏õ‡∏µ, ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏î‡∏µ',
          is_active: true
        },
        {
          title: 'IT Support',
          department: 'IT',
          description: '‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢',
          requirements: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ IT, ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
          is_active: true
        }
      ]);
    }
  } catch (error) {
    console.error('Error initializing collections:', error);
  }
}

module.exports = async (req, res) => {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    const db = await connectToDatabase();
    await initializeCollections(db);

    if (req.method === 'GET') {
      // Get application by ID
      const { id } = req.query;
      if (!id) {
        return res.status(400).json({ error: 'Application ID is required' });
      }

      const application = await db.collection('applications')
        .findOne({ application_id: id });
      
      if (!application) {
        return res.status(404).json({ error: 'Application not found' });
      }
      
      res.status(200).json(application);
    } else if (req.method === 'POST') {
      // Handle file upload and application submission
      upload.single('resume')(req, res, async (err) => {
        if (err) {
          return res.status(400).json({ error: err.message });
        }

        try {
          const {
            first_name,
            last_name,
            email,
            phone,
            position,
            experience_years,
            education,
            skills,
            cover_letter
          } = req.body;

          const application_id = `DYGS-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
          
          // Handle file upload
          let resume_data = null;
          if (req.file) {
            resume_data = {
              filename: req.file.originalname,
              mimetype: req.file.mimetype,
              size: req.file.size,
              data: req.file.buffer.toString('base64')
            };
          }

          const application = {
            application_id,
            first_name,
            last_name,
            email,
            phone,
            position,
            experience_years: parseInt(experience_years),
            education,
            skills,
            resume_data,
            cover_letter,
            status: 'pending',
            created_at: new Date(),
            updated_at: new Date()
          };

          await db.collection('applications').insertOne(application);

          // Send to LINE OA
          await sendToLineOA({
            application_id,
            first_name,
            last_name,
            email,
            phone,
            position,
            experience_years,
            education,
            skills,
            cover_letter,
            resume_data: resume_data ? '‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'
          });

          res.status(200).json({ 
            success: true, 
            application_id,
            message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3-5 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£' 
          });

        } catch (error) {
          console.error('Application error:', error);
          res.status(500).json({ error: 'Internal server error' });
        }
      });
    } else {
      res.status(405).json({ error: 'Method not allowed' });
    }
  } catch (error) {
    console.error('Database error:', error);
    res.status(500).json({ error: 'Database connection failed' });
  }
}; 